generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Report {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  location    String
  details     String
  imageUrl    String? // Optional URL of an image showing the incident
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  WORKER
  RESIDENT
}

model Voucher {
  id          String    @id @default(cuid())
  userId      String
  code        String    @unique
  description String
  points      Int
  redeemed    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  redeemedAt  DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//types of waste
model WasteLog {
  id         String    @id @default(cuid())
  workerId   String
  residentId String
  wasteType  WasteType
  quantity   Float
  loggedAt   DateTime  @default(now())

  worker   User @relation("WorkerLogs", fields: [workerId], references: [id], onDelete: Cascade)
  resident User @relation("ResidentLogs", fields: [residentId], references: [id], onDelete: Cascade)
}

enum WasteType {
  PLASTIC
  BIODEGRADABLE
  E_WASTE
  METAL
  PAPER
}

// For Next Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  username      String?
  name          String?    @unique
  phone         String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  address       String?
  about         String?
  password      String?
  role          UserRole
  accounts      Account[]
  sessions      Session[]
  reports       Report[]
  vouchers      Voucher[]
  workerLogs    WasteLog[] @relation("WorkerLogs")
  residentLogs  WasteLog[] @relation("ResidentLogs")

  @@index([email])
  @@index([name])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
